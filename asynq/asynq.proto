syntax = "proto2";

package asynq;

import "google/protobuf/descriptor.proto";

option go_package          = "github.com/gopkg-dev/protoc-gen-go-asynq/asynq;asynq";
option java_multiple_files = true;
option java_package        = "com.github.asynq";

extend google.protobuf.MethodOptions {
    optional Task task = 567890;
}

message Task {
    // typename indicates the type of task to be performed.
    required string typename = 1;
    // specify how long a task may run.
    // If the timeout elapses before the Handler returns, then the task
    // will be retried.
    //
    // Zero duration means no limit.
    //
    // If there's a conflicting Deadline option, whichever comes earliest
    // will be used.
    optional int32 timeout = 2;
    // specify the max number of times
    // the task will be retried.
    //
    // Negative retry count is treated as zero retry.
    optional int32 max_retry = 3;
    // specify the duration of retention period for the task.
    // If this option is provided, the task will be stored as a completed task after successful processing.
    // A completed task will be deleted after the specified duration elapses.
    optional int32 retention = 4;
    // unique option to enqueue a task only if the given task is unique.
    // Task enqueued with this option is guaranteed to be unique within the given ttl.
    // Once the task gets processed successfully or once the TTL has expired, another task with the same uniqueness may be enqueued.
    // ErrDuplicateTask error is returned when enqueueing a duplicate task.
    // TTL duration must be greater than or equal to 1 second.
    //
    // Uniqueness of a task is based on the following properties:
    //     - Task Type
    //     - Task Payload
    //     - Queue Name
    optional int32 unique = 5;

    enum PayloadType {
        Protobuf = 0;
        JSON     = 1;
    }
    optional PayloadType payload_type = 6 [default = Protobuf];
}
